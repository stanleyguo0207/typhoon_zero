// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: type/rpc_type.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_type_2frpc_5ftype_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_type_2frpc_5ftype_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pgt_custom/pgt_custom_options.pb.h"
#include "error_code.pb.h"
#include "define.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_type_2frpc_5ftype_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_type_2frpc_5ftype_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_type_2frpc_5ftype_2eproto;
namespace tpn {
namespace protocol {
class Address;
struct AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class NoResponse;
struct NoResponseDefaultTypeInternal;
extern NoResponseDefaultTypeInternal _NoResponse_default_instance_;
}  // namespace protocol
}  // namespace tpn
PROTOBUF_NAMESPACE_OPEN
template<> ::tpn::protocol::Address* Arena::CreateMaybeMessage<::tpn::protocol::Address>(Arena*);
template<> ::tpn::protocol::Header* Arena::CreateMaybeMessage<::tpn::protocol::Header>(Arena*);
template<> ::tpn::protocol::NoResponse* Arena::CreateMaybeMessage<::tpn::protocol::NoResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tpn {
namespace protocol {

// ===================================================================

class NoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tpn.protocol.NoResponse) */ {
 public:
  inline NoResponse() : NoResponse(nullptr) {}
  ~NoResponse() override;
  explicit constexpr NoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoResponse(const NoResponse& from);
  NoResponse(NoResponse&& from) noexcept
    : NoResponse() {
    *this = ::std::move(from);
  }

  inline NoResponse& operator=(const NoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoResponse& operator=(NoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoResponse* internal_default_instance() {
    return reinterpret_cast<const NoResponse*>(
               &_NoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NoResponse& a, NoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NoResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NoResponse* New() const final {
    return new NoResponse();
  }

  NoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tpn.protocol.NoResponse";
  }
  protected:
  explicit NoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tpn.protocol.NoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_type_2frpc_5ftype_2eproto;
};
// -------------------------------------------------------------------

class Address final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tpn.protocol.Address) */ {
 public:
  inline Address() : Address(nullptr) {}
  ~Address() override;
  explicit constexpr Address(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Address(const Address& from);
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address& operator=(Address&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Address& default_instance() {
    return *internal_default_instance();
  }
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }
  inline void Swap(Address* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return new Address();
  }

  Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Address& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Address& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tpn.protocol.Address";
  }
  protected:
  explicit Address(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddRessFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string add_ress = 1;
  void clear_add_ress();
  const std::string& add_ress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_add_ress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_add_ress();
  PROTOBUF_MUST_USE_RESULT std::string* release_add_ress();
  void set_allocated_add_ress(std::string* add_ress);
  private:
  const std::string& _internal_add_ress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_add_ress(const std::string& value);
  std::string* _internal_mutable_add_ress();
  public:

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tpn.protocol.Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr add_ress_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_type_2frpc_5ftype_2eproto;
};
// -------------------------------------------------------------------

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tpn.protocol.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  explicit constexpr Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return new Header();
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Header& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tpn.protocol.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceIdFieldNumber = 1,
    kTokenFieldNumber = 2,
    kSizeFieldNumber = 3,
    kServiceHashFieldNumber = 4,
    kMethodIdFieldNumber = 5,
    kStatusFieldNumber = 6,
  };
  // uint32 service_id = 1;
  void clear_service_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id() const;
  void set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_id() const;
  void _internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 token = 2;
  void clear_token();
  ::PROTOBUF_NAMESPACE_ID::uint32 token() const;
  void set_token(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_token() const;
  void _internal_set_token(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // fixed32 service_hash = 4;
  void clear_service_hash();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_hash() const;
  void set_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_hash() const;
  void _internal_set_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 method_id = 5;
  void clear_method_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 method_id() const;
  void set_method_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_method_id() const;
  void _internal_set_method_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 status = 6;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tpn.protocol.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 method_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_type_2frpc_5ftype_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NoResponse

// -------------------------------------------------------------------

// Address

// string add_ress = 1;
inline void Address::clear_add_ress() {
  add_ress_.ClearToEmpty();
}
inline const std::string& Address::add_ress() const {
  // @@protoc_insertion_point(field_get:tpn.protocol.Address.add_ress)
  return _internal_add_ress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Address::set_add_ress(ArgT0&& arg0, ArgT... args) {
 
 add_ress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tpn.protocol.Address.add_ress)
}
inline std::string* Address::mutable_add_ress() {
  std::string* _s = _internal_mutable_add_ress();
  // @@protoc_insertion_point(field_mutable:tpn.protocol.Address.add_ress)
  return _s;
}
inline const std::string& Address::_internal_add_ress() const {
  return add_ress_.Get();
}
inline void Address::_internal_set_add_ress(const std::string& value) {
  
  add_ress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Address::_internal_mutable_add_ress() {
  
  return add_ress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Address::release_add_ress() {
  // @@protoc_insertion_point(field_release:tpn.protocol.Address.add_ress)
  return add_ress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Address::set_allocated_add_ress(std::string* add_ress) {
  if (add_ress != nullptr) {
    
  } else {
    
  }
  add_ress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), add_ress,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:tpn.protocol.Address.add_ress)
}

// uint32 port = 2;
inline void Address::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Address::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Address::port() const {
  // @@protoc_insertion_point(field_get:tpn.protocol.Address.port)
  return _internal_port();
}
inline void Address::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void Address::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:tpn.protocol.Address.port)
}

// -------------------------------------------------------------------

// Header

// uint32 service_id = 1;
inline void Header::clear_service_id() {
  service_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_service_id() const {
  return service_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::service_id() const {
  // @@protoc_insertion_point(field_get:tpn.protocol.Header.service_id)
  return _internal_service_id();
}
inline void Header::_internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  service_id_ = value;
}
inline void Header::set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:tpn.protocol.Header.service_id)
}

// uint32 token = 2;
inline void Header::clear_token() {
  token_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_token() const {
  return token_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::token() const {
  // @@protoc_insertion_point(field_get:tpn.protocol.Header.token)
  return _internal_token();
}
inline void Header::_internal_set_token(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  token_ = value;
}
inline void Header::set_token(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:tpn.protocol.Header.token)
}

// uint32 size = 3;
inline void Header::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::size() const {
  // @@protoc_insertion_point(field_get:tpn.protocol.Header.size)
  return _internal_size();
}
inline void Header::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void Header::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:tpn.protocol.Header.size)
}

// fixed32 service_hash = 4;
inline void Header::clear_service_hash() {
  service_hash_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_service_hash() const {
  return service_hash_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::service_hash() const {
  // @@protoc_insertion_point(field_get:tpn.protocol.Header.service_hash)
  return _internal_service_hash();
}
inline void Header::_internal_set_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  service_hash_ = value;
}
inline void Header::set_service_hash(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_hash(value);
  // @@protoc_insertion_point(field_set:tpn.protocol.Header.service_hash)
}

// uint32 method_id = 5;
inline void Header::clear_method_id() {
  method_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_method_id() const {
  return method_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::method_id() const {
  // @@protoc_insertion_point(field_get:tpn.protocol.Header.method_id)
  return _internal_method_id();
}
inline void Header::_internal_set_method_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  method_id_ = value;
}
inline void Header::set_method_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_method_id(value);
  // @@protoc_insertion_point(field_set:tpn.protocol.Header.method_id)
}

// uint32 status = 6;
inline void Header::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::status() const {
  // @@protoc_insertion_point(field_get:tpn.protocol.Header.status)
  return _internal_status();
}
inline void Header::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void Header::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:tpn.protocol.Header.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace tpn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_type_2frpc_5ftype_2eproto
