// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: complex_type.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_complex_5ftype_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_complex_5ftype_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include "define.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_complex_5ftype_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_complex_5ftype_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_complex_5ftype_2eproto;
namespace test {
class ComplexObject;
struct ComplexObjectDefaultTypeInternal;
extern ComplexObjectDefaultTypeInternal _ComplexObject_default_instance_;
class ComplexObject_MapInfoEntry_DoNotUse;
struct ComplexObject_MapInfoEntry_DoNotUseDefaultTypeInternal;
extern ComplexObject_MapInfoEntry_DoNotUseDefaultTypeInternal _ComplexObject_MapInfoEntry_DoNotUse_default_instance_;
class MapInfo;
struct MapInfoDefaultTypeInternal;
extern MapInfoDefaultTypeInternal _MapInfo_default_instance_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> ::test::ComplexObject* Arena::CreateMaybeMessage<::test::ComplexObject>(Arena*);
template<> ::test::ComplexObject_MapInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::test::ComplexObject_MapInfoEntry_DoNotUse>(Arena*);
template<> ::test::MapInfo* Arena::CreateMaybeMessage<::test::MapInfo>(Arena*);
template<> ::test::Result* Arena::CreateMaybeMessage<::test::Result>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test {

enum Gender : int {
  kGenderMan = 0,
  kGenderWoMan = 1,
  Gender_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Gender_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Gender_IsValid(int value);
constexpr Gender Gender_MIN = kGenderMan;
constexpr Gender Gender_MAX = kGenderWoMan;
constexpr int Gender_ARRAYSIZE = Gender_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gender_descriptor();
template<typename T>
inline const std::string& Gender_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Gender>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Gender_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Gender_descriptor(), enum_t_value);
}
inline bool Gender_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Gender* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Gender>(
    Gender_descriptor(), name, value);
}
// ===================================================================

class ComplexObject_MapInfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ComplexObject_MapInfoEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::test::MapInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ComplexObject_MapInfoEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::test::MapInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ComplexObject_MapInfoEntry_DoNotUse();
  explicit constexpr ComplexObject_MapInfoEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ComplexObject_MapInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ComplexObject_MapInfoEntry_DoNotUse& other);
  static const ComplexObject_MapInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ComplexObject_MapInfoEntry_DoNotUse*>(&_ComplexObject_MapInfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ComplexObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.ComplexObject) */ {
 public:
  inline ComplexObject() : ComplexObject(nullptr) {}
  ~ComplexObject() override;
  explicit constexpr ComplexObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComplexObject(const ComplexObject& from);
  ComplexObject(ComplexObject&& from) noexcept
    : ComplexObject() {
    *this = ::std::move(from);
  }

  inline ComplexObject& operator=(const ComplexObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexObject& operator=(ComplexObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplexObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexObject* internal_default_instance() {
    return reinterpret_cast<const ComplexObject*>(
               &_ComplexObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ComplexObject& a, ComplexObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ComplexObject* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComplexObject* New() const final {
    return new ComplexObject();
  }

  ComplexObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComplexObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComplexObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ComplexObject& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplexObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.ComplexObject";
  }
  protected:
  explicit ComplexObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPhonesFieldNumber = 3,
    kResultsFieldNumber = 5,
    kAnyFieldNumber = 6,
    kMapInfoFieldNumber = 7,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kGenderFieldNumber = 4,
  };
  // repeated string phones = 3;
  int phones_size() const;
  private:
  int _internal_phones_size() const;
  public:
  void clear_phones();
  const std::string& phones(int index) const;
  std::string* mutable_phones(int index);
  void set_phones(int index, const std::string& value);
  void set_phones(int index, std::string&& value);
  void set_phones(int index, const char* value);
  void set_phones(int index, const char* value, size_t size);
  std::string* add_phones();
  void add_phones(const std::string& value);
  void add_phones(std::string&& value);
  void add_phones(const char* value);
  void add_phones(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& phones() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_phones();
  private:
  const std::string& _internal_phones(int index) const;
  std::string* _internal_add_phones();
  public:

  // repeated .test.Result results = 5;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::test::Result* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::Result >*
      mutable_results();
  private:
  const ::test::Result& _internal_results(int index) const;
  ::test::Result* _internal_add_results();
  public:
  const ::test::Result& results(int index) const;
  ::test::Result* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::Result >&
      results() const;

  // repeated .google.protobuf.Any any = 6;
  int any_size() const;
  private:
  int _internal_any_size() const;
  public:
  void clear_any();
  PROTOBUF_NAMESPACE_ID::Any* mutable_any(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_any();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_any(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_any();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& any(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_any();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      any() const;

  // map<uint32, .test.MapInfo> map_info = 7;
  int map_info_size() const;
  private:
  int _internal_map_info_size() const;
  public:
  void clear_map_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::test::MapInfo >&
      _internal_map_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::test::MapInfo >*
      _internal_mutable_map_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::test::MapInfo >&
      map_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::test::MapInfo >*
      mutable_map_info();

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .test.Gender gender = 4;
  void clear_gender();
  ::test::Gender gender() const;
  void set_gender(::test::Gender value);
  private:
  ::test::Gender _internal_gender() const;
  void _internal_set_gender(::test::Gender value);
  public:

  // @@protoc_insertion_point(class_scope:test.ComplexObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> phones_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::Result > results_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > any_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ComplexObject_MapInfoEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::test::MapInfo,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> map_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int gender_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_complex_5ftype_2eproto;
};
// -------------------------------------------------------------------

class Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  ~Result() override;
  explicit constexpr Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return new Result();
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumsFieldNumber = 3,
    kUrlFieldNumber = 1,
    kTitleFieldNumber = 2,
  };
  // repeated uint32 nums = 3;
  int nums_size() const;
  private:
  int _internal_nums_size() const;
  public:
  void clear_nums();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nums(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_nums() const;
  void _internal_add_nums(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_nums();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 nums(int index) const;
  void set_nums(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_nums(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      nums() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_nums();

  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_MUST_USE_RESULT std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // @@protoc_insertion_point(class_scope:test.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > nums_;
  mutable std::atomic<int> _nums_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_complex_5ftype_2eproto;
};
// -------------------------------------------------------------------

class MapInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.MapInfo) */ {
 public:
  inline MapInfo() : MapInfo(nullptr) {}
  ~MapInfo() override;
  explicit constexpr MapInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapInfo(const MapInfo& from);
  MapInfo(MapInfo&& from) noexcept
    : MapInfo() {
    *this = ::std::move(from);
  }

  inline MapInfo& operator=(const MapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapInfo& operator=(MapInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapInfo* internal_default_instance() {
    return reinterpret_cast<const MapInfo*>(
               &_MapInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MapInfo& a, MapInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MapInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapInfo* New() const final {
    return new MapInfo();
  }

  MapInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.MapInfo";
  }
  protected:
  explicit MapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:test.MapInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_complex_5ftype_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ComplexObject

// int32 id = 1;
inline void ComplexObject::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComplexObject::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComplexObject::id() const {
  // @@protoc_insertion_point(field_get:test.ComplexObject.id)
  return _internal_id();
}
inline void ComplexObject::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ComplexObject::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:test.ComplexObject.id)
}

// string name = 2;
inline void ComplexObject::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ComplexObject::name() const {
  // @@protoc_insertion_point(field_get:test.ComplexObject.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComplexObject::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test.ComplexObject.name)
}
inline std::string* ComplexObject::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:test.ComplexObject.name)
  return _s;
}
inline const std::string& ComplexObject::_internal_name() const {
  return name_.Get();
}
inline void ComplexObject::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ComplexObject::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ComplexObject::release_name() {
  // @@protoc_insertion_point(field_release:test.ComplexObject.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ComplexObject::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:test.ComplexObject.name)
}

// repeated string phones = 3;
inline int ComplexObject::_internal_phones_size() const {
  return phones_.size();
}
inline int ComplexObject::phones_size() const {
  return _internal_phones_size();
}
inline void ComplexObject::clear_phones() {
  phones_.Clear();
}
inline std::string* ComplexObject::add_phones() {
  std::string* _s = _internal_add_phones();
  // @@protoc_insertion_point(field_add_mutable:test.ComplexObject.phones)
  return _s;
}
inline const std::string& ComplexObject::_internal_phones(int index) const {
  return phones_.Get(index);
}
inline const std::string& ComplexObject::phones(int index) const {
  // @@protoc_insertion_point(field_get:test.ComplexObject.phones)
  return _internal_phones(index);
}
inline std::string* ComplexObject::mutable_phones(int index) {
  // @@protoc_insertion_point(field_mutable:test.ComplexObject.phones)
  return phones_.Mutable(index);
}
inline void ComplexObject::set_phones(int index, const std::string& value) {
  phones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:test.ComplexObject.phones)
}
inline void ComplexObject::set_phones(int index, std::string&& value) {
  phones_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:test.ComplexObject.phones)
}
inline void ComplexObject::set_phones(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  phones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test.ComplexObject.phones)
}
inline void ComplexObject::set_phones(int index, const char* value, size_t size) {
  phones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.ComplexObject.phones)
}
inline std::string* ComplexObject::_internal_add_phones() {
  return phones_.Add();
}
inline void ComplexObject::add_phones(const std::string& value) {
  phones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test.ComplexObject.phones)
}
inline void ComplexObject::add_phones(std::string&& value) {
  phones_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:test.ComplexObject.phones)
}
inline void ComplexObject::add_phones(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  phones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test.ComplexObject.phones)
}
inline void ComplexObject::add_phones(const char* value, size_t size) {
  phones_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test.ComplexObject.phones)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ComplexObject::phones() const {
  // @@protoc_insertion_point(field_list:test.ComplexObject.phones)
  return phones_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ComplexObject::mutable_phones() {
  // @@protoc_insertion_point(field_mutable_list:test.ComplexObject.phones)
  return &phones_;
}

// .test.Gender gender = 4;
inline void ComplexObject::clear_gender() {
  gender_ = 0;
}
inline ::test::Gender ComplexObject::_internal_gender() const {
  return static_cast< ::test::Gender >(gender_);
}
inline ::test::Gender ComplexObject::gender() const {
  // @@protoc_insertion_point(field_get:test.ComplexObject.gender)
  return _internal_gender();
}
inline void ComplexObject::_internal_set_gender(::test::Gender value) {
  
  gender_ = value;
}
inline void ComplexObject::set_gender(::test::Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:test.ComplexObject.gender)
}

// repeated .test.Result results = 5;
inline int ComplexObject::_internal_results_size() const {
  return results_.size();
}
inline int ComplexObject::results_size() const {
  return _internal_results_size();
}
inline void ComplexObject::clear_results() {
  results_.Clear();
}
inline ::test::Result* ComplexObject::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:test.ComplexObject.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::Result >*
ComplexObject::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:test.ComplexObject.results)
  return &results_;
}
inline const ::test::Result& ComplexObject::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::test::Result& ComplexObject::results(int index) const {
  // @@protoc_insertion_point(field_get:test.ComplexObject.results)
  return _internal_results(index);
}
inline ::test::Result* ComplexObject::_internal_add_results() {
  return results_.Add();
}
inline ::test::Result* ComplexObject::add_results() {
  ::test::Result* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:test.ComplexObject.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::Result >&
ComplexObject::results() const {
  // @@protoc_insertion_point(field_list:test.ComplexObject.results)
  return results_;
}

// repeated .google.protobuf.Any any = 6;
inline int ComplexObject::_internal_any_size() const {
  return any_.size();
}
inline int ComplexObject::any_size() const {
  return _internal_any_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* ComplexObject::mutable_any(int index) {
  // @@protoc_insertion_point(field_mutable:test.ComplexObject.any)
  return any_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
ComplexObject::mutable_any() {
  // @@protoc_insertion_point(field_mutable_list:test.ComplexObject.any)
  return &any_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& ComplexObject::_internal_any(int index) const {
  return any_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ComplexObject::any(int index) const {
  // @@protoc_insertion_point(field_get:test.ComplexObject.any)
  return _internal_any(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* ComplexObject::_internal_add_any() {
  return any_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* ComplexObject::add_any() {
  PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_any();
  // @@protoc_insertion_point(field_add:test.ComplexObject.any)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
ComplexObject::any() const {
  // @@protoc_insertion_point(field_list:test.ComplexObject.any)
  return any_;
}

// map<uint32, .test.MapInfo> map_info = 7;
inline int ComplexObject::_internal_map_info_size() const {
  return map_info_.size();
}
inline int ComplexObject::map_info_size() const {
  return _internal_map_info_size();
}
inline void ComplexObject::clear_map_info() {
  map_info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::test::MapInfo >&
ComplexObject::_internal_map_info() const {
  return map_info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::test::MapInfo >&
ComplexObject::map_info() const {
  // @@protoc_insertion_point(field_map:test.ComplexObject.map_info)
  return _internal_map_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::test::MapInfo >*
ComplexObject::_internal_mutable_map_info() {
  return map_info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::test::MapInfo >*
ComplexObject::mutable_map_info() {
  // @@protoc_insertion_point(field_mutable_map:test.ComplexObject.map_info)
  return _internal_mutable_map_info();
}

// -------------------------------------------------------------------

// Result

// string url = 1;
inline void Result::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& Result::url() const {
  // @@protoc_insertion_point(field_get:test.Result.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Result::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test.Result.url)
}
inline std::string* Result::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:test.Result.url)
  return _s;
}
inline const std::string& Result::_internal_url() const {
  return url_.Get();
}
inline void Result::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Result::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Result::release_url() {
  // @@protoc_insertion_point(field_release:test.Result.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Result::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:test.Result.url)
}

// string title = 2;
inline void Result::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& Result::title() const {
  // @@protoc_insertion_point(field_get:test.Result.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Result::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test.Result.title)
}
inline std::string* Result::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:test.Result.title)
  return _s;
}
inline const std::string& Result::_internal_title() const {
  return title_.Get();
}
inline void Result::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Result::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Result::release_title() {
  // @@protoc_insertion_point(field_release:test.Result.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Result::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:test.Result.title)
}

// repeated uint32 nums = 3;
inline int Result::_internal_nums_size() const {
  return nums_.size();
}
inline int Result::nums_size() const {
  return _internal_nums_size();
}
inline void Result::clear_nums() {
  nums_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Result::_internal_nums(int index) const {
  return nums_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Result::nums(int index) const {
  // @@protoc_insertion_point(field_get:test.Result.nums)
  return _internal_nums(index);
}
inline void Result::set_nums(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  nums_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.Result.nums)
}
inline void Result::_internal_add_nums(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  nums_.Add(value);
}
inline void Result::add_nums(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_nums(value);
  // @@protoc_insertion_point(field_add:test.Result.nums)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Result::_internal_nums() const {
  return nums_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Result::nums() const {
  // @@protoc_insertion_point(field_list:test.Result.nums)
  return _internal_nums();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Result::_internal_mutable_nums() {
  return &nums_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Result::mutable_nums() {
  // @@protoc_insertion_point(field_mutable_list:test.Result.nums)
  return _internal_mutable_nums();
}

// -------------------------------------------------------------------

// MapInfo

// uint32 id = 1;
inline void MapInfo::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapInfo::id() const {
  // @@protoc_insertion_point(field_get:test.MapInfo.id)
  return _internal_id();
}
inline void MapInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void MapInfo::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:test.MapInfo.id)
}

// string name = 2;
inline void MapInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& MapInfo::name() const {
  // @@protoc_insertion_point(field_get:test.MapInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MapInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test.MapInfo.name)
}
inline std::string* MapInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:test.MapInfo.name)
  return _s;
}
inline const std::string& MapInfo::_internal_name() const {
  return name_.Get();
}
inline void MapInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MapInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MapInfo::release_name() {
  // @@protoc_insertion_point(field_release:test.MapInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MapInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:test.MapInfo.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::test::Gender> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test::Gender>() {
  return ::test::Gender_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_complex_5ftype_2eproto
