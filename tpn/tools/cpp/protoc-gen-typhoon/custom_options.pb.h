// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: custom_options.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_custom_5foptions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_custom_5foptions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_custom_5foptions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_custom_5foptions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_custom_5foptions_2eproto;
namespace tpn {
namespace protocol {
class TPNMethodOptions;
struct TPNMethodOptionsDefaultTypeInternal;
extern TPNMethodOptionsDefaultTypeInternal _TPNMethodOptions_default_instance_;
class TPNServiceOptions;
struct TPNServiceOptionsDefaultTypeInternal;
extern TPNServiceOptionsDefaultTypeInternal _TPNServiceOptions_default_instance_;
}  // namespace protocol
}  // namespace tpn
PROTOBUF_NAMESPACE_OPEN
template<> ::tpn::protocol::TPNMethodOptions* Arena::CreateMaybeMessage<::tpn::protocol::TPNMethodOptions>(Arena*);
template<> ::tpn::protocol::TPNServiceOptions* Arena::CreateMaybeMessage<::tpn::protocol::TPNServiceOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tpn {
namespace protocol {

// ===================================================================

class TPNServiceOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tpn.protocol.TPNServiceOptions) */ {
 public:
  inline TPNServiceOptions() : TPNServiceOptions(nullptr) {}
  ~TPNServiceOptions() override;
  explicit constexpr TPNServiceOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TPNServiceOptions(const TPNServiceOptions& from);
  TPNServiceOptions(TPNServiceOptions&& from) noexcept
    : TPNServiceOptions() {
    *this = ::std::move(from);
  }

  inline TPNServiceOptions& operator=(const TPNServiceOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPNServiceOptions& operator=(TPNServiceOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TPNServiceOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const TPNServiceOptions* internal_default_instance() {
    return reinterpret_cast<const TPNServiceOptions*>(
               &_TPNServiceOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TPNServiceOptions& a, TPNServiceOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(TPNServiceOptions* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPNServiceOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TPNServiceOptions* New() const final {
    return new TPNServiceOptions();
  }

  TPNServiceOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TPNServiceOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TPNServiceOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TPNServiceOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPNServiceOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tpn.protocol.TPNServiceOptions";
  }
  protected:
  explicit TPNServiceOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptorNameFieldNumber = 1,
  };
  // string descriptor_name = 1;
  void clear_descriptor_name();
  const std::string& descriptor_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_descriptor_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_descriptor_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_descriptor_name();
  void set_allocated_descriptor_name(std::string* descriptor_name);
  private:
  const std::string& _internal_descriptor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_descriptor_name(const std::string& value);
  std::string* _internal_mutable_descriptor_name();
  public:

  // @@protoc_insertion_point(class_scope:tpn.protocol.TPNServiceOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descriptor_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_custom_5foptions_2eproto;
};
// -------------------------------------------------------------------

class TPNMethodOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tpn.protocol.TPNMethodOptions) */ {
 public:
  inline TPNMethodOptions() : TPNMethodOptions(nullptr) {}
  ~TPNMethodOptions() override;
  explicit constexpr TPNMethodOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TPNMethodOptions(const TPNMethodOptions& from);
  TPNMethodOptions(TPNMethodOptions&& from) noexcept
    : TPNMethodOptions() {
    *this = ::std::move(from);
  }

  inline TPNMethodOptions& operator=(const TPNMethodOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPNMethodOptions& operator=(TPNMethodOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TPNMethodOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const TPNMethodOptions* internal_default_instance() {
    return reinterpret_cast<const TPNMethodOptions*>(
               &_TPNMethodOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TPNMethodOptions& a, TPNMethodOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(TPNMethodOptions* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPNMethodOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TPNMethodOptions* New() const final {
    return new TPNMethodOptions();
  }

  TPNMethodOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TPNMethodOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TPNMethodOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TPNMethodOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPNMethodOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tpn.protocol.TPNMethodOptions";
  }
  protected:
  explicit TPNMethodOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tpn.protocol.TPNMethodOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_custom_5foptions_2eproto;
};
// ===================================================================

static const int kServiceOptionsFieldNumber = 90000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::ServiceOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::tpn::protocol::TPNServiceOptions >, 11, false >
  service_options;
static const int kMethodOptionsFieldNumber = 90000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::tpn::protocol::TPNMethodOptions >, 11, false >
  method_options;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TPNServiceOptions

// string descriptor_name = 1;
inline void TPNServiceOptions::clear_descriptor_name() {
  descriptor_name_.ClearToEmpty();
}
inline const std::string& TPNServiceOptions::descriptor_name() const {
  // @@protoc_insertion_point(field_get:tpn.protocol.TPNServiceOptions.descriptor_name)
  return _internal_descriptor_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TPNServiceOptions::set_descriptor_name(ArgT0&& arg0, ArgT... args) {
 
 descriptor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tpn.protocol.TPNServiceOptions.descriptor_name)
}
inline std::string* TPNServiceOptions::mutable_descriptor_name() {
  std::string* _s = _internal_mutable_descriptor_name();
  // @@protoc_insertion_point(field_mutable:tpn.protocol.TPNServiceOptions.descriptor_name)
  return _s;
}
inline const std::string& TPNServiceOptions::_internal_descriptor_name() const {
  return descriptor_name_.Get();
}
inline void TPNServiceOptions::_internal_set_descriptor_name(const std::string& value) {
  
  descriptor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TPNServiceOptions::_internal_mutable_descriptor_name() {
  
  return descriptor_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TPNServiceOptions::release_descriptor_name() {
  // @@protoc_insertion_point(field_release:tpn.protocol.TPNServiceOptions.descriptor_name)
  return descriptor_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TPNServiceOptions::set_allocated_descriptor_name(std::string* descriptor_name) {
  if (descriptor_name != nullptr) {
    
  } else {
    
  }
  descriptor_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descriptor_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:tpn.protocol.TPNServiceOptions.descriptor_name)
}

// -------------------------------------------------------------------

// TPNMethodOptions

// uint32 id = 1;
inline void TPNMethodOptions::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TPNMethodOptions::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TPNMethodOptions::id() const {
  // @@protoc_insertion_point(field_get:tpn.protocol.TPNMethodOptions.id)
  return _internal_id();
}
inline void TPNMethodOptions::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void TPNMethodOptions::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tpn.protocol.TPNMethodOptions.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace tpn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_custom_5foptions_2eproto
