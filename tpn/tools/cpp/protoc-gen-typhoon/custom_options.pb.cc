// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: custom_options.proto

#include "custom_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tpn {
namespace protocol {
constexpr TPNServiceOptions::TPNServiceOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : descriptor_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TPNServiceOptionsDefaultTypeInternal {
  constexpr TPNServiceOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TPNServiceOptionsDefaultTypeInternal() {}
  union {
    TPNServiceOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TPNServiceOptionsDefaultTypeInternal _TPNServiceOptions_default_instance_;
constexpr TPNMethodOptions::TPNMethodOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u){}
struct TPNMethodOptionsDefaultTypeInternal {
  constexpr TPNMethodOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TPNMethodOptionsDefaultTypeInternal() {}
  union {
    TPNMethodOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TPNMethodOptionsDefaultTypeInternal _TPNMethodOptions_default_instance_;
}  // namespace protocol
}  // namespace tpn
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_custom_5foptions_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_custom_5foptions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_custom_5foptions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_custom_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tpn::protocol::TPNServiceOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tpn::protocol::TPNServiceOptions, descriptor_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tpn::protocol::TPNMethodOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tpn::protocol::TPNMethodOptions, id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tpn::protocol::TPNServiceOptions)},
  { 6, -1, sizeof(::tpn::protocol::TPNMethodOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tpn::protocol::_TPNServiceOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tpn::protocol::_TPNMethodOptions_default_instance_),
};

const char descriptor_table_protodef_custom_5foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024custom_options.proto\022\014tpn.protocol\032 go"
  "ogle/protobuf/descriptor.proto\",\n\021TPNSer"
  "viceOptions\022\027\n\017descriptor_name\030\001 \001(\t\"\036\n\020"
  "TPNMethodOptions\022\n\n\002id\030\001 \001(\r:[\n\017service_"
  "options\022\037.google.protobuf.ServiceOptions"
  "\030\220\277\005 \001(\0132\037.tpn.protocol.TPNServiceOption"
  "s:X\n\016method_options\022\036.google.protobuf.Me"
  "thodOptions\030\220\277\005 \001(\0132\036.tpn.protocol.TPNMe"
  "thodOptionsB\005H\001\200\001\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_custom_5foptions_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_custom_5foptions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_custom_5foptions_2eproto = {
  false, false, 346, descriptor_table_protodef_custom_5foptions_2eproto, "custom_options.proto", 
  &descriptor_table_custom_5foptions_2eproto_once, descriptor_table_custom_5foptions_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_custom_5foptions_2eproto::offsets,
  file_level_metadata_custom_5foptions_2eproto, file_level_enum_descriptors_custom_5foptions_2eproto, file_level_service_descriptors_custom_5foptions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_custom_5foptions_2eproto_getter() {
  return &descriptor_table_custom_5foptions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_custom_5foptions_2eproto(&descriptor_table_custom_5foptions_2eproto);
namespace tpn {
namespace protocol {

// ===================================================================

class TPNServiceOptions::_Internal {
 public:
};

TPNServiceOptions::TPNServiceOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tpn.protocol.TPNServiceOptions)
}
TPNServiceOptions::TPNServiceOptions(const TPNServiceOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  descriptor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_descriptor_name().empty()) {
    descriptor_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_descriptor_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tpn.protocol.TPNServiceOptions)
}

inline void TPNServiceOptions::SharedCtor() {
descriptor_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TPNServiceOptions::~TPNServiceOptions() {
  // @@protoc_insertion_point(destructor:tpn.protocol.TPNServiceOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TPNServiceOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  descriptor_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TPNServiceOptions::ArenaDtor(void* object) {
  TPNServiceOptions* _this = reinterpret_cast< TPNServiceOptions* >(object);
  (void)_this;
}
void TPNServiceOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TPNServiceOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TPNServiceOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tpn.protocol.TPNServiceOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  descriptor_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TPNServiceOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string descriptor_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_descriptor_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tpn.protocol.TPNServiceOptions.descriptor_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TPNServiceOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tpn.protocol.TPNServiceOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string descriptor_name = 1;
  if (!this->_internal_descriptor_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_descriptor_name().data(), static_cast<int>(this->_internal_descriptor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tpn.protocol.TPNServiceOptions.descriptor_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_descriptor_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tpn.protocol.TPNServiceOptions)
  return target;
}

size_t TPNServiceOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tpn.protocol.TPNServiceOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string descriptor_name = 1;
  if (!this->_internal_descriptor_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_descriptor_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TPNServiceOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TPNServiceOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TPNServiceOptions::GetClassData() const { return &_class_data_; }

void TPNServiceOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TPNServiceOptions *>(to)->MergeFrom(
      static_cast<const TPNServiceOptions &>(from));
}


void TPNServiceOptions::MergeFrom(const TPNServiceOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tpn.protocol.TPNServiceOptions)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_descriptor_name().empty()) {
    _internal_set_descriptor_name(from._internal_descriptor_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TPNServiceOptions::CopyFrom(const TPNServiceOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tpn.protocol.TPNServiceOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPNServiceOptions::IsInitialized() const {
  return true;
}

void TPNServiceOptions::InternalSwap(TPNServiceOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &descriptor_name_, GetArenaForAllocation(),
      &other->descriptor_name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TPNServiceOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_custom_5foptions_2eproto_getter, &descriptor_table_custom_5foptions_2eproto_once,
      file_level_metadata_custom_5foptions_2eproto[0]);
}

// ===================================================================

class TPNMethodOptions::_Internal {
 public:
};

TPNMethodOptions::TPNMethodOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tpn.protocol.TPNMethodOptions)
}
TPNMethodOptions::TPNMethodOptions(const TPNMethodOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:tpn.protocol.TPNMethodOptions)
}

inline void TPNMethodOptions::SharedCtor() {
id_ = 0u;
}

TPNMethodOptions::~TPNMethodOptions() {
  // @@protoc_insertion_point(destructor:tpn.protocol.TPNMethodOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TPNMethodOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TPNMethodOptions::ArenaDtor(void* object) {
  TPNMethodOptions* _this = reinterpret_cast< TPNMethodOptions* >(object);
  (void)_this;
}
void TPNMethodOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TPNMethodOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TPNMethodOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tpn.protocol.TPNMethodOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TPNMethodOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TPNMethodOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tpn.protocol.TPNMethodOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tpn.protocol.TPNMethodOptions)
  return target;
}

size_t TPNMethodOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tpn.protocol.TPNMethodOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TPNMethodOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TPNMethodOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TPNMethodOptions::GetClassData() const { return &_class_data_; }

void TPNMethodOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TPNMethodOptions *>(to)->MergeFrom(
      static_cast<const TPNMethodOptions &>(from));
}


void TPNMethodOptions::MergeFrom(const TPNMethodOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tpn.protocol.TPNMethodOptions)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TPNMethodOptions::CopyFrom(const TPNMethodOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tpn.protocol.TPNMethodOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPNMethodOptions::IsInitialized() const {
  return true;
}

void TPNMethodOptions::InternalSwap(TPNMethodOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TPNMethodOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_custom_5foptions_2eproto_getter, &descriptor_table_custom_5foptions_2eproto_once,
      file_level_metadata_custom_5foptions_2eproto[1]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::ServiceOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::tpn::protocol::TPNServiceOptions >, 11, false >
  service_options(kServiceOptionsFieldNumber, ::tpn::protocol::TPNServiceOptions::default_instance());
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::tpn::protocol::TPNMethodOptions >, 11, false >
  method_options(kMethodOptionsFieldNumber, ::tpn::protocol::TPNMethodOptions::default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace tpn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tpn::protocol::TPNServiceOptions* Arena::CreateMaybeMessage< ::tpn::protocol::TPNServiceOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpn::protocol::TPNServiceOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::tpn::protocol::TPNMethodOptions* Arena::CreateMaybeMessage< ::tpn::protocol::TPNMethodOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tpn::protocol::TPNMethodOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
